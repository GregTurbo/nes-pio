// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --------- //
// nes_write //
// --------- //

#define nes_write_wrap_target 1
#define nes_write_wrap 3

#define nes_write_offset_write 0u

static const uint16_t nes_write_program_instructions[] = {
    0xf881, // 0: set    pindirs, 1      side 1
            //    .wrap_target
    0x6001, // 1: out    pins, 1
    0x2020, // 2: wait   0 pin, 0
    0x30a0, // 3: wait   1 pin, 0        side 0
            //    .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program nes_write_program = {
    .instructions = nes_write_program_instructions,
    .length = 4,
    .origin = -1,
};

inline static pio_sm_config nes_write_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + nes_write_wrap_target, offset + nes_write_wrap);
    sm_config_set_sideset(&c, 2, true, false);
    return c;
}
#endif

// ----- //
// latch //
// ----- //

#define latch_wrap_target 1
#define latch_wrap 3

#define latch_offset_latch 0u

static const uint16_t latch_program_instructions[] = {
    0xe080, // 0: set    pindirs, 0
            //    .wrap_target
    0x20a0, // 1: wait   1 pin, 0
    0xc000, // 2: irq    nowait 0
    0x2020, // 3: wait   0 pin, 0
            //    .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program latch_program = {
    .instructions = latch_program_instructions,
    .length = 4,
    .origin = -1,
};

inline static pio_sm_config latch_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + latch_wrap_target, offset + latch_wrap);
    return c;
}

#include <hardware/clocks.h>

inline static pio_sm_config nes_write_program_get_config(
    PIO pio,
    uint sm,
    uint offset,
    uint data_pin,
    uint clock_pin,
    uint packet_size
) {
    pio_gpio_init(pio, data_pin);
    pio_sm_config c = nes_write_program_get_default_config(offset);
    sm_config_set_out_pins(&c, data_pin, 1);
    sm_config_set_set_pins(&c, data_pin, 1);
    sm_config_set_sideset_pins(&c, data_pin);
    sm_config_set_in_pins(&c, clock_pin);
    // Shift to right, autopull based on packet_size
    sm_config_set_out_shift(&c, true, true, packet_size);
    // int cycles_per_bit = shiftreg_T1 + shiftreg_T2 + shiftreg_T3;
    // int bitrate = 250000;
    // float div = clock_get_hz(clk_sys) / (cycles_per_bit * bitrate);
    // sm_config_set_clkdiv(&c, div);
    // sm_config_set_clkdiv(&c, 1);
    return c;
}

// static inline pio_sm_config latch_program_get_config(PIO pio, uint sm, uint offset, uint
// latch_pin) {
//     pio_sm_config c = latch_program_get_default_config(offset);
//     sm_config_set_in_pins(&c, latch_pin);
//     return c;
// }
inline static void nes_write_program_init(
    PIO pio,
    uint sm,
    uint offset,
    uint data_pin,
    uint clock_pin,
    pio_sm_config *c
) {
    pio_sm_init(pio, sm, offset, c);
    pio_sm_set_enabled(pio, sm, true);
}

// static inline void latch_program_init(
//     PIO pio,
//     uint sm,
//     uint offset,
//     uint pin,
//     pio_sm_config *c
//) {
//     pio_sm_init(pio, sm, offset + shiftreg_offset_read, c);
//     pio_sm_set_enabled(pio, sm, true);
// }

#endif
