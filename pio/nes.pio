.program nes_write

.define public T1 1

public write:
    set pindirs 1      ; Set pin to output
write_loop:
.wrap_target
    out pins, 1        ; Shift a bit from OSR to data pin
    wait 0 pin 0       ; Wait for falling clock edge
    wait 1 pin 0 [T1]  ; Wait for rising clock edge before shifting out the next bit
.wrap


% c-sdk {
#include <hardware/clocks.h>

static inline pio_sm_config nes_write_program_get_config(PIO pio, uint sm, uint offset, uint data_pin, uint clock_pin, uint packet_size) {
    pio_gpio_init(pio, data_pin);

    pio_sm_config c = nes_write_program_get_default_config(offset);
    sm_config_set_out_pins(&c, data_pin, 1);
    sm_config_set_set_pins(&c, data_pin, 1);
    sm_config_set_in_pins(&c, clock_pin);
    // Shift to right, autopull based on packet_size
    sm_config_set_out_shift(&c, true, true, packet_size);

    int delay_cycles = nes_write_T1;
    int delay_nanos = 100;
    int target_clock = delay_cycles / (delay_nanos * 1E-9);
    float div = clock_get_hz(clk_sys) / target_clock;
    sm_config_set_clkdiv(&c, div);

    return c;
}

static inline void nes_write_program_init(
    PIO pio,
    uint sm,
    uint offset,
    uint data_pin,
    uint clock_pin,
    pio_sm_config *c
) {
    pio_sm_init(pio, sm, offset, c);
    pio_sm_set_enabled(pio, sm, true);
}
%}